var RedisConnError, RedisConnectionManager, createError, errors, redis, url;

url = require('url');

redis = require('redis');

errors = require('./errors');

createError = errors.createError;

RedisConnError = errors.RedisConnError;

RedisConnectionManager = (function() {
  function RedisConnectionManager() {}

  RedisConnectionManager.prototype._connectedClients = {};

  RedisConnectionManager.prototype._connectedClientsCallbacks = {};

  RedisConnectionManager.prototype.connectedClientsForURL = function(redisURL) {
    if (this._connectedClients[redisURL] == null) {
      this._connectedClients[redisURL] = {};
    }
    return this._connectedClients[redisURL];
  };

  RedisConnectionManager.prototype.connectedClientsCallbacksForURL = function(redisURL) {
    if (this._connectedClientsCallbacks[redisURL] == null) {
      this._connectedClientsCallbacks[redisURL] = {};
    }
    return this._connectedClientsCallbacks[redisURL];
  };

  RedisConnectionManager.prototype.obtainClient = function(redisURL, id, cb) {
    var connectedClientsCallbacksForURL, connectedClientsForURL;
    connectedClientsForURL = this.connectedClientsForURL(redisURL);
    connectedClientsCallbacksForURL = this.connectedClientsCallbacksForURL(redisURL);
    if (connectedClientsForURL[id] != null) {
      return cb(null, connectedClientsForURL[id]);
    }
    if (connectedClientsCallbacksForURL[id] != null) {
      return connectedClientsCallbacksForURL[id].push(cb);
    }
    connectedClientsCallbacksForURL[id] = [cb];
    return this._createClient(redisURL, function(err, client) {
      var callback, _i, _len, _ref;
      if (!err) {
        connectedClientsForURL[id] = client;
      }
      _ref = connectedClientsCallbacksForURL[id];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        callback = _ref[_i];
        callback(err, client);
      }
      return connectedClientsCallbacksForURL[id] = void 0;
    });
  };

  RedisConnectionManager.prototype._createClient = function(redisURL, cb) {
    var client, database, parsed_auth, parsed_url, password, path, _ref, _ref1;
    parsed_url = url.parse(redisURL);
    parsed_auth = ((_ref = parsed_url.auth) != null ? _ref : '').split(':');
    password = parsed_auth[1];
    path = ((_ref1 = parsed_url.pathname) != null ? _ref1 : '/').slice(1);
    database = path.length ? path : '0';
    client = redis.createClient(parsed_url.port, parsed_url.hostname);
    if (password) {
      client.auth(password, function(err) {
        if (err) {
          return cb(createError(err, client));
        }
      });
    }
    client.select(database);
    client.on('ready', function() {
      client.send_anyways = true;
      client.select(database);
      client.send_anyways = false;
      return cb(null, client);
    });
    return client.on('error', function(err) {
      return cb(createError(err, client));
    });
  };

  return RedisConnectionManager;

})();

exports.RedisConnectionManager = new RedisConnectionManager();

exports.RedisConnError = RedisConnError;

//# sourceMappingURL=data:application/json;base64,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Um9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsidXJsICAgICA9IHJlcXVpcmUoJ3VybCcpXG5yZWRpcyAgID0gcmVxdWlyZSgncmVkaXMnKVxuZXJyb3JzICA9IHJlcXVpcmUoJy4vZXJyb3JzJylcblxuY3JlYXRlRXJyb3IgPSBlcnJvcnMuY3JlYXRlRXJyb3JcblJlZGlzQ29ubkVycm9yID0gZXJyb3JzLlJlZGlzQ29ubkVycm9yXG5cbmNsYXNzIFJlZGlzQ29ubmVjdGlvbk1hbmFnZXJcbiAgX2Nvbm5lY3RlZENsaWVudHM6ICAgICAgICAgIHt9XG4gIF9jb25uZWN0ZWRDbGllbnRzQ2FsbGJhY2tzOiB7fVxuXG4gIGNvbm5lY3RlZENsaWVudHNGb3JVUkw6IChyZWRpc1VSTCkgLT5cbiAgICB1bmxlc3MgQF9jb25uZWN0ZWRDbGllbnRzW3JlZGlzVVJMXT9cbiAgICAgIEBfY29ubmVjdGVkQ2xpZW50c1tyZWRpc1VSTF0gPSB7fVxuXG4gICAgcmV0dXJuIEBfY29ubmVjdGVkQ2xpZW50c1tyZWRpc1VSTF1cblxuICBjb25uZWN0ZWRDbGllbnRzQ2FsbGJhY2tzRm9yVVJMOiAocmVkaXNVUkwpIC0+XG4gICAgdW5sZXNzIEBfY29ubmVjdGVkQ2xpZW50c0NhbGxiYWNrc1tyZWRpc1VSTF0/XG4gICAgICBAX2Nvbm5lY3RlZENsaWVudHNDYWxsYmFja3NbcmVkaXNVUkxdID0ge31cblxuICAgIHJldHVybiBAX2Nvbm5lY3RlZENsaWVudHNDYWxsYmFja3NbcmVkaXNVUkxdXG5cbiAgb2J0YWluQ2xpZW50OiAocmVkaXNVUkwsIGlkLCBjYikgLT5cbiAgICBjb25uZWN0ZWRDbGllbnRzRm9yVVJMICAgICAgICAgID0gQGNvbm5lY3RlZENsaWVudHNGb3JVUkwgcmVkaXNVUkxcbiAgICBjb25uZWN0ZWRDbGllbnRzQ2FsbGJhY2tzRm9yVVJMID0gQGNvbm5lY3RlZENsaWVudHNDYWxsYmFja3NGb3JVUkwgcmVkaXNVUkxcblxuICAgIHJldHVybiBjYihudWxsLCBjb25uZWN0ZWRDbGllbnRzRm9yVVJMW2lkXSkgaWYgY29ubmVjdGVkQ2xpZW50c0ZvclVSTFtpZF0/XG4gICAgcmV0dXJuIGNvbm5lY3RlZENsaWVudHNDYWxsYmFja3NGb3JVUkxbaWRdLnB1c2ggY2IgaWYgY29ubmVjdGVkQ2xpZW50c0NhbGxiYWNrc0ZvclVSTFtpZF0/XG5cbiAgICBjb25uZWN0ZWRDbGllbnRzQ2FsbGJhY2tzRm9yVVJMW2lkXSA9IFtjYl1cblxuICAgIEBfY3JlYXRlQ2xpZW50IHJlZGlzVVJMLCAoZXJyLCBjbGllbnQpIC0+XG4gICAgICBjb25uZWN0ZWRDbGllbnRzRm9yVVJMW2lkXSA9IGNsaWVudCB1bmxlc3MgZXJyXG4gICAgICAjcmV0dXJuIHVubGVzcyBjb25uZWN0ZWRDbGllbnRzQ2FsbGJhY2tzRm9yVVJMW2lkXVxuICAgICAgZm9yIGNhbGxiYWNrIGluIGNvbm5lY3RlZENsaWVudHNDYWxsYmFja3NGb3JVUkxbaWRdXG4gICAgICAgIGNhbGxiYWNrKGVyciwgY2xpZW50KVxuICAgICAgY29ubmVjdGVkQ2xpZW50c0NhbGxiYWNrc0ZvclVSTFtpZF0gPSB1bmRlZmluZWRcblxuICBfY3JlYXRlQ2xpZW50OiAocmVkaXNVUkwsIGNiKSAtPlxuICAgIHBhcnNlZF91cmwgID0gdXJsLnBhcnNlIHJlZGlzVVJMXG4gICAgcGFyc2VkX2F1dGggPSAocGFyc2VkX3VybC5hdXRoID8gJycpLnNwbGl0ICc6J1xuICAgIHBhc3N3b3JkICAgID0gcGFyc2VkX2F1dGhbMV1cbiAgICBwYXRoICAgICAgICA9IChwYXJzZWRfdXJsLnBhdGhuYW1lID8gJy8nKS5zbGljZSAxXG4gICAgZGF0YWJhc2UgICAgPSBpZiBwYXRoLmxlbmd0aCB0aGVuIHBhdGggZWxzZSAnMCdcblxuICAgIGNsaWVudCA9IHJlZGlzLmNyZWF0ZUNsaWVudCBwYXJzZWRfdXJsLnBvcnQsIHBhcnNlZF91cmwuaG9zdG5hbWVcblxuICAgIGlmIHBhc3N3b3JkXG4gICAgICBjbGllbnQuYXV0aCBwYXNzd29yZCwgKGVycikgLT5cbiAgICAgICAgY2IgY3JlYXRlRXJyb3IoZXJyLCBjbGllbnQpIGlmIGVyclxuXG4gICAgY2xpZW50LnNlbGVjdChkYXRhYmFzZSlcbiAgICBjbGllbnQub24gJ3JlYWR5JywgKCkgLT5cbiAgICAgIGNsaWVudC5zZW5kX2FueXdheXMgPSB0cnVlXG4gICAgICBjbGllbnQuc2VsZWN0KGRhdGFiYXNlKVxuICAgICAgY2xpZW50LnNlbmRfYW55d2F5cyA9IGZhbHNlXG4gICAgICBjYiBudWxsLCBjbGllbnRcblxuICAgIGNsaWVudC5vbiAnZXJyb3InLCAoZXJyKSAtPlxuICAgICAgY2IgY3JlYXRlRXJyb3IoZXJyLCBjbGllbnQpXG5cblxuZXhwb3J0cy5SZWRpc0Nvbm5lY3Rpb25NYW5hZ2VyID0gbmV3IFJlZGlzQ29ubmVjdGlvbk1hbmFnZXIoKVxuZXhwb3J0cy5SZWRpc0Nvbm5FcnJvciA9IFJlZGlzQ29ubkVycm9yXG4iXX0=