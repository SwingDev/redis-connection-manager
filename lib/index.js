var RedisConnectionManager, RedisError, createError, errors, redis, url;

url = require('url');

redis = require('redis');

errors = require('./errors');

createError = errors.createError;

RedisError = errors.RedisError;

RedisConnectionManager = (function() {
  function RedisConnectionManager() {}

  RedisConnectionManager.prototype._connectedClients = {};

  RedisConnectionManager.prototype._connectedClientsCallbacks = {};

  RedisConnectionManager.prototype._connectedClientsRetainCounts = {};

  RedisConnectionManager.prototype.connectedClientsForURL = function(redisURL) {
    if (this._connectedClients[redisURL] == null) {
      this._connectedClients[redisURL] = {};
    }
    return this._connectedClients[redisURL];
  };

  RedisConnectionManager.prototype.connectedClientsCallbacksForURL = function(redisURL) {
    if (this._connectedClientsCallbacks[redisURL] == null) {
      this._connectedClientsCallbacks[redisURL] = {};
    }
    return this._connectedClientsCallbacks[redisURL];
  };

  RedisConnectionManager.prototype.connectedClientsRetainCountsForURL = function(redisURL) {
    if (this._connectedClientsRetainCounts[redisURL] == null) {
      this._connectedClientsRetainCounts[redisURL] = {};
    }
    return this._connectedClientsRetainCounts[redisURL];
  };

  RedisConnectionManager.prototype.obtainClient = function(redisURL, id, cb) {
    var connectedClientsCallbacksForURL, connectedClientsForURL, connectedClientsRetainCountsForURL;
    connectedClientsForURL = this.connectedClientsForURL(redisURL);
    connectedClientsCallbacksForURL = this.connectedClientsCallbacksForURL(redisURL);
    connectedClientsRetainCountsForURL = this.connectedClientsRetainCountsForURL(redisURL);
    if (connectedClientsForURL[id] != null) {
      connectedClientsRetainCountsForURL[id] += 1;
      return cb(null, connectedClientsForURL[id]);
    }
    if (connectedClientsCallbacksForURL[id] != null) {
      return connectedClientsCallbacksForURL[id].push(cb);
    }
    connectedClientsCallbacksForURL[id] = [cb];
    connectedClientsRetainCountsForURL[id] = 0;
    return this._createClient(redisURL, function(err, client) {
      var callback, i, len, ref;
      if (!err) {
        connectedClientsForURL[id] = client;
      }
      if (!connectedClientsCallbacksForURL[id]) {
        return;
      }
      ref = connectedClientsCallbacksForURL[id];
      for (i = 0, len = ref.length; i < len; i++) {
        callback = ref[i];
        if (client) {
          connectedClientsRetainCountsForURL[id] += 1;
        }
        callback(err, client);
      }
      return connectedClientsCallbacksForURL[id] = void 0;
    });
  };

  RedisConnectionManager.prototype.returnClient = function(redisURL, id) {
    var connectedClientsForURL, connectedClientsRetainCountsForURL;
    connectedClientsForURL = this.connectedClientsForURL(redisURL);
    connectedClientsRetainCountsForURL = this.connectedClientsRetainCountsForURL(redisURL);
    connectedClientsRetainCountsForURL[id] -= 1;
    if (!connectedClientsRetainCountsForURL[id]) {
      connectedClientsForURL[id].quit();
      return connectedClientsForURL[id] = void 0;
    }
  };

  RedisConnectionManager.prototype._createClient = function(redisURL, cb) {
    var client, database, parsed_auth, parsed_url, password, path, ref, ref1;
    parsed_url = url.parse(redisURL);
    parsed_auth = ((ref = parsed_url.auth) != null ? ref : '').split(':');
    password = parsed_auth[1];
    path = ((ref1 = parsed_url.pathname) != null ? ref1 : '/').slice(1);
    database = path.length ? path : '0';
    client = redis.createClient(parsed_url.port, parsed_url.hostname);
    if (password) {
      client.auth(password, function(err) {
        if (err) {
          return cb(createError(err, client));
        }
        return cb(null);
      });
    }
    client.select(database);
    client.on('ready', function() {
      client.send_anyways = true;
      client.select(database);
      client.send_anyways = false;
      return cb(null, client);
    });
    return client.on('error', function(err) {
      if (err) {
        return cb(createError(err, client));
      }
      return cb(null);
    });
  };

  return RedisConnectionManager;

})();


/* */

exports.RedisConnectionManager = new RedisConnectionManager();

exports.RedisError = RedisError;

//# sourceMappingURL=data:application/json;base64,